# This is my Maestro environment description file.
# It starts up zookeeper, kafka, rest-api
__maestro:
  schema: 2

{%- set name = 'zk-kafka' %}
name: {{ name }}

ships:
  ship: {ip: 192.168.10.2, docker_port: 4243, timeout: 5}

audit:
  - type: log
    file: /tmp/maestro.auditlog

{%- with %}
{%- set env_variables = {
        'environment': 'production',
        'KAFKA_GROUP': 'TISENSOR',
        'KAFKA_TOPIC': 'DATAPOINT',
        'KAFKA_PER_CONSUMER_THREADS': 3,
        'SIMULATED_TISENSOR_COUNT': 3,
        'SIMULATED_TISENSOR_ID_HANDLE': 'TISENSOR_ID_',
        'PUBNUB_PUBLISH_KEY': '',
        'PUBNUB_SUBSCRIBE_KEY': ''
        } %}

# 1-node kafka cluster.
{%- set kafka_servers = {
        'ship': [('kafka-1', 1)]} %}

# 1-node ZooKeeper cluster.
{%- set zookeeper_servers = {
        'ship': [('zk-node-1', 1)]} %}

# rest-api
{%- set rest_api_servers = {
        'ship': [('rest-api-1', 1)]} %}

# rest-api-load
{%- set rest_api_load_servers = {
        'ship': [('rest-api-load-1', 1)]} %}

# spark-standalone-cluster, should be only one
{%- set spark_servers = {
        'ship': [('spark-cluster', 1)]} %}

services:
  zookeeper:
    image: quay.io/signalfuse/zookeeper:3.4.6-3
    env:
      {#- Unfortunately Jinja2 doesn't allow us to be less verbose here. #}
      {%- set serverids = [] %}
      {%- for ship, details in zookeeper_servers.items() %}
        {%- for name, server_id in details %}
          {%- set DO = serverids.append('{}:{}'.format(name, server_id)) %}
        {%- endfor %}
      {%- endfor %}
      {%- if serverids|length > 1 %}
      ZOOKEEPER_SERVER_IDS: {{ serverids|join(',') }}
      {%- endif %}
    instances:
      {%- for ship, details in zookeeper_servers.items() %}
      {%- for name, server_id in details %}
      {{ name }}:
        ship: {{ ship }}
        ports:
          client:
            exposed: 2181
            external: {{ 2181 + loop.index0 }}
          peer:
            exposed: 2888
            external: {{ 2888 + loop.index0 }}
          leader_election:
            exposed: 3888
            external: {{ 3888 + loop.index0 }}
        lifecycle:
          running: [{type: tcp, port: client, max_wait: 10}]
        volumes:
          /home/vagrant/data/zookeeper/{{ server_id }}: /var/lib/zookeeper
        env:
          SERVER_ID: {{ server_id }}
      {%- endfor %}
      {%- endfor %}

  kafka:
    image: quay.io/signalfuse/kafka:0.9.0.1-0
    requires: [ zookeeper ]
    env:
      ZOOKEEPER_BASE: /{{ name }}/kafka
      RETENTION_HOURS: 1
      REPLICATION: 3
      AUTO_LEADER_REBALANCE: true
    instances:
      {%- for ship, details in kafka_servers.items() %}
      {%- for name, broker_id in details %}
      {{ name }}:
        ship: {{ ship }}
        ports:
          broker: {{ 9092 + loop.index0 }}
        lifecycle:
          running: [{type: tcp, port: broker}]
        volumes:
          /home/vagrant/data/kafka/{{ broker_id }}: /var/lib/kafka
        env:
          BROKER_ID: {{ broker_id }}
        stop_timeout: 60
      {%- endfor %}
      {%- endfor %}


  restapi:
    image: tisensor_rest_kafka_spark:latest
    requires: [ zookeeper, kafka ]
    env:
      {%- for var_name, var_value in env_variables.iteritems() %}
      {{ var_name }}: {{ var_value }}
      {%- endfor %}
    instances:
      {%- for ship, details in rest_api_servers.items() %}
      {%- for name, server_id in details %}
      {{ name }}:
        ship: {{ ship }}
        ports:
          rest: {{ 8080 + loop.index0 }}
        lifecycle:
          running: [{type: tcp, port: rest}]
        stop_timeout: 60
      {%- endfor %}
      {%- endfor %}

  restapi-load:
    image: tisensor_rest_kafka_spark:latest
    requires: [ restapi ]
    env:
      {%- for var_name, var_value in env_variables.iteritems() %}
      {{ var_name }}: {{ var_value }}
      {%- endfor %}
      LOAD_GENERATION: 'True'
    instances:
      {%- for ship, details in rest_api_load_servers.items() %}
      {%- for name, server_id in details %}
      {{ name }}:
        ship: {{ ship }}
      {%- endfor %}
      {%- endfor %}

  tisensor-spark:
    image: tisensor_spark:latest
    requires: [kafka, restapi]
    env:
      {%- for var_name, var_value in env_variables.iteritems() %}
      {{ var_name }}: {{ var_value }}
      {%- endfor %}
    instances:
      {%- for ship, details in spark_servers.items() %}
      {%- for name, server_id in details %}
      {{ name }}:
        ship: {{ ship }}
      {%- endfor %}
      {%- endfor %}

{%- endwith %}